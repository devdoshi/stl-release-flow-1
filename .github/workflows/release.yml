on:
  push:
    branches:
      - main

concurrency: "releases"

permissions:
  contents: write
  pull-requests: write

name: release-please

jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - uses: google-github-actions/release-please-action@v3
        with:
          command: github-release
          release-type: node
          package-name: my-package
          default-branch: main

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: next
      # This will fail if other commits are pushed to next after next is fetched. You can wrap it with retrying as needed
      - name: Update next to match main (keeping any changes that happened in the meantime)
        run: |
          git --version
          REFERENCE_BRANCH=release-please--branches--next--components--my-package
          git fetch origin main
          git fetch origin $REFERENCE_BRANCH
          git fetch origin next
          git merge-base next $REFERENCE_BRANCH
          git checkout -b main origin/main
          git checkout -b $REFERENCE_BRANCH origin/$REFERENCE_BRANCH
          git checkout -b next origin/next
          LAST_SHARED_COMMIT_HASH=$(git merge-base next $REFERENCE_BRANCH)
          echo $LAST_SHARED_COMMIT_HASH
          git rev-list --count $LAST_SHARED_COMMIT_HASH..next
          CHANGE_COUNT=$(git rev-list --count $LAST_SHARED_COMMIT_HASH..next)
          echo $CHANGE_COUNT
          if [[ "$CHANGE_COUNT" -eq "0" ]]; 
          then
            echo "no new changes on next"    
          else
            echo "$CHANGE_COUNT new changes on next"
            git cherry-pick --allow-empty $LAST_SHARED_COMMIT_HASH..next
          fi

          git push --verbose --force-with-lease origin main:next
